МЕТА РОБОТИ

	Метою цієї лабораторної роботи є  розробка back-end частини для проєкту за темою «Програмна система для моніторингу місцеположення та  фізіологічних показників спеціальних служб у реальному часі з метою забезпечення безпеки та ефективності у виконанні завдань».

ХІД РОБОТИ

	У ході цієї лабораторної роботи була створена back-end частина додатку для моніторингу місцеположення та фізіологічних показників спеціальних служб у реальному часі з метою забезпечення безпеки та ефективності у виконанні завдань «SafetyShield». Серверна частина була написана на мові програмування PHP в середовищі PhpStorm з використанням Laravel framework. У даному проекті використовується реляційна база даних MySQL. Було створено розподілення ролей на адміністраторів та звичайних користувачів, перевірку на адміністратора та звичайного користувача. Для шифрування паролів та створення токенів авторизації було використано JWT (JSON Web Tokens).


1	ДІАГРАМА РОЗГОРТАННЯ

	Для створення серверної частини проекту було використано мову програмування PHP та фреймворк Laravel.
	Для зв’язку з базою даних, зв’язків між таблицями та створення моделей було використано Eloquent ORM. Eloquent ORM забезпечує зручний спосіб взаємодії з базою даних за допомогою об'єктно-орієнтованої моделі. Вона дозволяє працювати з таблицями бази даних через класи моделей, представляючи кожен рядок таблиці як об'єкт моделі.
Для шифрування паролів та створення токенів авторизації було використано JWT (JSON Web Tokens). JWT є компактним, самодостатнім і безпечним способом передачі інформації між сторонами за допомогою JSON-об'єктів. Це дозволяє створювати та перевіряти токени авторизації, а також забезпечує можливість шифрування паролів користувачів.
Проект було розбито на три шари:
-	 User Interface – конфігурація та запити, за якими користувач взаємодіє з API – контролери та роути відповідно до REST специфікації.
-	Бізнес-логіка – моделі даних та їхня обробка, а також методи в яких застосована обробка даних.
-	  Доступ до даних – створення таблиць бази даних, міграції та взаємодія бази даних із сервером.
Розглянемо Deployment Diagram (діаграму розгортання), зображену у додатку А на рисунку А.1.


2	ДІАГРАМА ПРЕЦЕДЕНТІВ

На рисунку Б.1 зображено діаграму прецедентів для загальної архітектури системи. На діаграмі можемо бачити, що адміністратор поділяється на аналітика даних, що має змогу переглядати показники датчиків, місцеположення службовців та їх фізичний стан, а також на адміністратора системи, що відповідає за створення організації, додавання нового службовця до організації, а також оновлення та видалення даних про службовців спеціальних служб та організацій.
Користувач у свою чергу має змогу зареєструватися, увійти в систему,  записати своє місцеположення через датчик геолокації, а також переглянути ці записи, а також записати та переглянути інформацію про свій поточний стан (частоту серцевих скорочень, температуру та тиск). Приклад контролера для запису показників фізичного стану наведено в додатку Ж.


3 ER-МОДЕЛЬ ДАНИХ


У додатку В на рисунку В.1 зображено ER-модель даних. Для розробки програмного продукту було обрано реляційну базу даних MySQL. Під час реалізації бази даних було створено наступні таблиці:
-	Users (Таблиця з даними про користувачів та ролі користувачів);
-	Organizations (Таблиця із підрозділами спеціальних служб);
-	Employees (Таблиця з даними про службовців певної спецслужби);
-	PhysicalStates (Таблиця з обробленими даними фізичних показників конкретного для службовця);
-	SensorData (Таблиця, що зберігає дані про датчик а також дані, що збирає цей датчик);
-	CurrentConditions (Таблиця, що зберігає дані про поточний стан службовця конкретного підрозділу спецслужби);
-	CurrentLocations (Таблиця, що зберігає дані про географічні координати – широту та довготу для місцеположення службовця);
-	EmployeeLocation (Таблиця, що пов’язує місцеположення із конкретним службовцем).
Відношення між таблицями:
-	Користувач може мати лише одну роль (адміністратор, користувач тощо);
-	В одному спецпідрозділі може працювати багато службовців;
-	Кожен службовець спецслужби має жодного або багато записів про свій фізичний стан;
-	Кожен оброблений показник фізичного стану службовця має один або багато показників із датчика;
-	Кожне підприємство має багато робочих кімнат;
-	На одній і тій самій локації може знаходитися декілька службовців із різних підрозділів;
-	Один службовець може мати декілька умов праці.


4 ДІАГРАМА ДІЯЛЬНОСТІ


У додатку Г на рисунку Г.1 наведено діаграму діяльності, на якій зображено процес додавання адміністратором службовця до спецпідрозділу та визначення поточного місцеположення службовця, а також визначення його фізичних показників (серцевого тиску та температури). По-перше, користувач авторизується, далі адміністратор системи під’єднує цього користувача до спецпідрозділу. Далі користувач має змогу приєднати датчик для визначення його місцеположення та переглядати дані про місцеположення, а також приєднати датчики для визначення частоти серцевих скорочень, тиску та температури. При записі місцеположення службовця враховуються координати його місцеположення та координати розташування спеціального підрозділу, та вираховується відстань між місцеположенням службовця та головним підрозділом (приклад обробки даних наведено в додатку И).


5 REST СПЕЦИФІКАЦІЯ


При написанні серверної частини додатку було дотримано принципів REST. Ця архітектура визначає, як система має бути організована для того щоб бути масштабованою та забезпечувати простоту інтеграції з різними компонентами. REST специфікація наведена в таблиці 1.

Таблиця 1 – REST-специфікація
Назва	Метод	Шлях	Тіло запиту
Register	POST	/api/auth/register	{
“name”: “string”,
“surname”:“string”,
“email”: “string”
“password”:“string”,
}
Login	POST	/api/auth/login	{
“email”: “string”,
“password”: “string”
}
Logout	POST	/api/auth/logout	-
Add new organization	POST	/api/admin/organization	{
  "organization_name": "string", "organization_activity" :"string",
     "address" : "string"
}

Продовження таблиці 1
Add new worker	POST	/api/admin/employee	{
"employee_id":int,
    "position":"string",
    "gender" :"string",    "user_id" : int,
    "organization_id": int
}
    "user_id" : int,
    "organization_id": int
}
Show users	GET	/api/admin/:id	-
Show organizations	GET	/api/admin/organizations	-
Show organization by id	GET	/api/admin/organizations/:id	-
Show workers	GET	/api/admin/employees	-
Show worker by id	GET	/api/admin/employees/:id	-

Продовження таблиці 1
Show current conditions	GET	/api/admin/current_conditions/:id	-
Show current locations	GET	/api/admin/current_locations/:id	-
Show physical conditions	GET	/api/admin/health_readings/:id	-
Show sensor data	GET	/api/admin/sensor_data/:id	-
Delete worker	DELETE	/api/admin/employees/:id	-
Delete organization	DELETE	/api/admin/organizations/:id	-
Delete user	DELETE	/api/admin/user/:id	-
Update worker	PUT	/api/admin/employee/:id	{
"position":"string",
    "gender" :"string",
    "user_id" : int,
    "organization_id": int
}


Продовження таблиці 1
Update organization	PUT	/api/admin/organization/:id	{
  "organization_name": "string",  "organization_activity" :"string",
     "address" : "string"

}
Get user info	GET	/api/user_info	-
Get user location	GET	/api/user_location	-
Get user condition	GET	/api/user_condition	-
Get user physical conditions	GET	/api/get_health_reading	-
Get sensor data	GET	/api/get_sensor_data	-


Продовження таблиці 1
Add location	POST	/api/current_location	{
"latitude":  float,
  "longitude": float,
  "office_latitude": float,
  "office_longitude": float,
  "timestamp": timestamp
}
Add condition	POST	/api/current_condition	{
  "status": "string",
  "notes" :  "string"
}
Add physical condition	POST	/api/health_reading	{
"sensor_type": “string” "temperature": float,
  "localization": "string",
   "heart_rate" :  float,
  "temperature": float,   "blood_pressure" : “string”
}


Продовження таблиці 1
Add sensor data	POST	/api/add_sensor_data	{
"type":"string",
  "value":"string",   "localization":"string",
"location_id":int
}
Delete physical condition	DELETE	/api/delete_health_reading/:id	-
Delete account	DELETE	/api/delete_account/:id	-


6 АРХІТЕКТУРА СЕРВЕРНОЇ ЧАСТИНИ


	Візуальне зображення структури серверу зображено у додатку Д на рисунку Д.1. Для розробки архітектури серверної частини було використано стандартну архітектуру проекту Laravel, що містить директорії Http/Controllers де зберігаються контролери де і прописана основна логіка серверної частини відповідно до кожного ендпоінту. У директорії Models містяться моделі, де прописані зв’язки з таблицями бази даних. У файлі routes/api.php прописані усі роути серверної частини. У директорії database/migrations описані усі міграції що були створені.

ВИСНОВКИ


	У даній лабораторній роботі було створено серверну (back-end) частину для проєкту за темою «програмна система для моніторингу місцеположення та  фізіологічних показників спеціальних служб у реальному часі з метою забезпечення безпеки та ефективності у виконанні завдань» за допомогою мови програмування PHP з використанням Laravel в середовищі PhpStorm і базою даних MySQL.
	Посилання на демо-відео:
https://youtu.be/bQms6hOGZ-Y
Посилання на репозиторій GitHub:
https://github.com/NureSosnytskyiAndrii/apz-pzpi-21-8-sosnytskyi-andrii





